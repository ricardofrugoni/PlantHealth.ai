"""
PlantHealth AI - Interface Web Interativa
Aplica√ß√£o Streamlit para diagn√≥stico de doen√ßas em plantas
"""

import streamlit as st
import tensorflow as tf
from tensorflow import keras
import numpy as np
from PIL import Image
import cv2
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import json
import sys

# Adicionar diret√≥rio src ao path
sys.path.append(str(Path(__file__).parent.parent / 'src'))

try:
    from utils import (
        preprocess_image, predict_disease, make_gradcam_heatmap,
        overlay_gradcam, find_last_conv_layer, get_treatment_recommendation
    )
except ImportError:
    st.error("‚ö†Ô∏è N√£o foi poss√≠vel importar m√≥dulos auxiliares. Certifique-se de que o diret√≥rio src/ est√° no path.")


# ============================================================================
# CONFIGURA√á√ÉO DA P√ÅGINA
# ============================================================================

st.set_page_config(
    page_title="PlantHealth AI",
    page_icon="üå±",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #2ecc71;
        text-align: center;
        font-weight: bold;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #7f8c8d;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #2ecc71;
    }
    .warning-box {
        background-color: #fff3cd;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #ffc107;
    }
    .success-box {
        background-color: #d4edda;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #28a745;
    }
    .danger-box {
        background-color: #f8d7da;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #dc3545;
    }
</style>
""", unsafe_allow_html=True)


# ============================================================================
# FUN√á√ïES DE CACHE
# ============================================================================

@st.cache_resource
def load_model_cached(model_path):
    """Carrega modelo com cache"""
    try:
        model = keras.models.load_model(model_path)
        return model
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar modelo: {str(e)}")
        return None


@st.cache_data
def load_class_mapping_cached(mapping_path):
    """Carrega mapeamento de classes com cache"""
    try:
        with open(mapping_path, 'r', encoding='utf-8') as f:
            class_names = json.load(f)
            return {int(k): v for k, v in class_names.items()}
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar mapeamento de classes: {str(e)}")
        return None


# ============================================================================
# SIDEBAR - CONFIGURA√á√ïES
# ============================================================================

def render_sidebar():
    """Renderiza sidebar com configura√ß√µes"""
    st.sidebar.markdown("## ‚öôÔ∏è Configura√ß√µes")
    
    # Upload de modelo customizado
    st.sidebar.markdown("### üì¶ Modelo")
    use_custom_model = st.sidebar.checkbox("Usar modelo customizado", value=False)
    
    if use_custom_model:
        model_file = st.sidebar.file_uploader("Upload do modelo (.keras)", type=['keras', 'h5'])
        mapping_file = st.sidebar.file_uploader("Upload do mapeamento (.json)", type=['json'])
        
        if model_file and mapping_file:
            # Salvar temporariamente
            temp_model_path = Path("temp_model.keras")
            temp_mapping_path = Path("temp_mapping.json")
            
            with open(temp_model_path, 'wb') as f:
                f.write(model_file.read())
            with open(temp_mapping_path, 'w') as f:
                f.write(mapping_file.getvalue().decode())
            
            return str(temp_model_path), str(temp_mapping_path)
    
    # Usar modelo padr√£o
    model_path = st.sidebar.text_input(
        "Caminho do modelo",
        value="models/plant_disease_model_final.keras"
    )
    
    mapping_path = st.sidebar.text_input(
        "Caminho do mapeamento",
        value="models/class_mapping.json"
    )
    
    # Configura√ß√µes de predi√ß√£o
    st.sidebar.markdown("### üéØ Predi√ß√£o")
    confidence_threshold = st.sidebar.slider(
        "Limiar de confian√ßa",
        min_value=0.0,
        max_value=1.0,
        value=0.7,
        step=0.05
    )
    
    show_gradcam = st.sidebar.checkbox("Mostrar Grad-CAM", value=True)
    show_top_k = st.sidebar.slider("Top-K predi√ß√µes", min_value=1, max_value=5, value=3)
    
    # Informa√ß√µes
    st.sidebar.markdown("---")
    st.sidebar.markdown("### ‚ÑπÔ∏è Sobre")
    st.sidebar.info("""
    **PlantHealth AI** v1.0
    
    Sistema de diagn√≥stico de doen√ßas em plantas usando Deep Learning.
    
    - üåø 38 classes de doen√ßas
    - üéØ 96%+ de acur√°cia
    - üî• Visualiza√ß√£o Grad-CAM
    - üìä Recomenda√ß√µes de tratamento
    """)
    
    return model_path, mapping_path, confidence_threshold, show_gradcam, show_top_k


# ============================================================================
# HEADER
# ============================================================================

def render_header():
    """Renderiza header da aplica√ß√£o"""
    st.markdown('<h1 class="main-header">üå± PlantHealth AI</h1>', unsafe_allow_html=True)
    st.markdown('<p class="sub-header">Sistema Inteligente de Diagn√≥stico Fitossanit√°rio</p>', unsafe_allow_html=True)
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üåø Classes", "38")
    with col2:
        st.metric("üéØ Acur√°cia", "96%+")
    with col3:
        st.metric("üì∏ Imagens Treinadas", "54K+")
    with col4:
        st.metric("‚ö° Infer√™ncia", "~100ms")
    
    st.markdown("---")


# ============================================================================
# UPLOAD E PREDI√á√ÉO
# ============================================================================

def render_upload_section():
    """Renderiza se√ß√£o de upload de imagem"""
    st.markdown("## üì§ Upload de Imagem")
    
    # Op√ß√µes de entrada
    input_method = st.radio(
        "Escolha o m√©todo de entrada:",
        ["Upload de arquivo", "C√¢mera", "URL"],
        horizontal=True
    )
    
    image = None
    
    if input_method == "Upload de arquivo":
        uploaded_file = st.file_uploader(
            "Escolha uma imagem de folha",
            type=['jpg', 'jpeg', 'png'],
            help="Formatos suportados: JPG, JPEG, PNG"
        )
        
        if uploaded_file:
            image = Image.open(uploaded_file)
    
    elif input_method == "C√¢mera":
        camera_image = st.camera_input("Tire uma foto da folha")
        if camera_image:
            image = Image.open(camera_image)
    
    elif input_method == "URL":
        url = st.text_input("Digite a URL da imagem:")
        if url:
            try:
                import requests
                from io import BytesIO
                response = requests.get(url)
                image = Image.open(BytesIO(response.content))
            except Exception as e:
                st.error(f"‚ùå Erro ao carregar imagem da URL: {str(e)}")
    
    return image


def render_prediction_results(image, model, class_names, confidence_threshold, show_gradcam, show_top_k):
    """Renderiza resultados da predi√ß√£o"""
    st.markdown("## üîç An√°lise e Diagn√≥stico")
    
    # Layout em colunas
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.markdown("### üì∏ Imagem Original")
        st.image(image, use_column_width=True)
        
        # Informa√ß√µes da imagem
        st.markdown("#### ‚ÑπÔ∏è Informa√ß√µes da Imagem")
        st.write(f"- **Dimens√µes:** {image.size[0]} x {image.size[1]} pixels")
        st.write(f"- **Formato:** {image.format}")
        st.write(f"- **Modo:** {image.mode}")
    
    with col2:
        with st.spinner("üîÑ Analisando imagem..."):
            # Fazer predi√ß√£o
            result = predict_disease(model, image, class_names, top_k=show_top_k)
            
            primary_class = result['primary_class']
            confidence = result['confidence']
            
            # Mostrar resultado principal
            st.markdown("### ü¶† Diagn√≥stico")
            
            if confidence >= confidence_threshold:
                st.markdown(f'<div class="success-box">', unsafe_allow_html=True)
                st.markdown(f"#### ‚úÖ {primary_class}")
                st.markdown(f"**Confian√ßa:** {confidence:.2%}")
                st.markdown('</div>', unsafe_allow_html=True)
            else:
                st.markdown(f'<div class="warning-box">', unsafe_allow_html=True)
                st.markdown(f"#### ‚ö†Ô∏è {primary_class}")
                st.markdown(f"**Confian√ßa:** {confidence:.2%}")
                st.markdown("**Aviso:** Confian√ßa baixa. Recomenda-se verifica√ß√£o manual.")
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Top-K predi√ß√µes
            st.markdown(f"### üìä Top-{show_top_k} Predi√ß√µes")
            
            for i, pred in enumerate(result['top_predictions'], 1):
                progress = pred['confidence']
                st.write(f"**{i}. {pred['class']}**")
                st.progress(progress)
                st.caption(f"Confian√ßa: {progress:.2%}")
    
    # Grad-CAM
    if show_gradcam:
        st.markdown("---")
        st.markdown("## üî• Grad-CAM: Visualiza√ß√£o de Aten√ß√£o")
        
        with st.spinner("‚ö° Gerando Grad-CAM..."):
            try:
                # Encontrar √∫ltima camada convolucional
                last_conv_layer = find_last_conv_layer(model)
                
                # Preparar imagem
                img_array = preprocess_image(image)
                pred_index = result['top_predictions'][0]['index']
                
                # Gerar heatmap
                heatmap = make_gradcam_heatmap(img_array, model, last_conv_layer, pred_index)
                
                # Salvar imagem temporariamente
                temp_img_path = Path("temp_image.jpg")
                image.save(temp_img_path)
                
                # Overlay
                original, heatmap_img, superimposed = overlay_gradcam(temp_img_path, heatmap)
                
                # Mostrar
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown("#### Original")
                    st.image(original, use_column_width=True)
                
                with col2:
                    st.markdown("#### Heatmap")
                    st.image(heatmap_img, use_column_width=True)
                
                with col3:
                    st.markdown("#### Sobreposi√ß√£o")
                    st.image(superimposed, use_column_width=True)
                
                st.info("üí° As regi√µes em vermelho/amarelo indicam onde o modelo est√° focando para fazer o diagn√≥stico.")
                
                # Limpar arquivo tempor√°rio
                if temp_img_path.exists():
                    temp_img_path.unlink()
                
            except Exception as e:
                st.error(f"‚ùå Erro ao gerar Grad-CAM: {str(e)}")
    
    # Recomenda√ß√µes de tratamento
    st.markdown("---")
    st.markdown("## üíä Recomenda√ß√µes de Tratamento")
    
    treatment = get_treatment_recommendation(primary_class)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üß™ Fungicidas/Pesticidas")
        if treatment['fungicides']:
            for fungicide in treatment['fungicides']:
                st.markdown(f"- {fungicide}")
        else:
            st.success("‚úÖ Planta saud√°vel - nenhum tratamento necess√°rio")
    
    with col2:
        st.markdown("### üåæ Pr√°ticas Culturais")
        for practice in treatment['cultural_practices']:
            st.markdown(f"- {practice}")
    
    st.markdown("### ‚ö†Ô∏è Preven√ß√£o")
    st.info(treatment['prevention'])
    
    # Aviso legal
    st.markdown("---")
    st.markdown('<div class="warning-box">', unsafe_allow_html=True)
    st.markdown("""
    **‚ö†Ô∏è AVISO IMPORTANTE:**
    
    Este √© um diagn√≥stico automatizado baseado em Deep Learning. 
    As recomenda√ß√µes s√£o gen√©ricas e devem ser validadas por um profissional qualificado.
    
    **Sempre consulte um agr√¥nomo ou engenheiro agr√≠cola para:**
    - Confirma√ß√£o do diagn√≥stico
    - Dosagens espec√≠ficas de produtos
    - Orienta√ß√µes adaptadas √† sua regi√£o e cultura
    - Manejo integrado de pragas e doen√ßas
    """)
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Bot√£o de download do relat√≥rio
    st.markdown("---")
    if st.button("üìÑ Gerar Relat√≥rio PDF"):
        st.info("üöß Funcionalidade de gera√ß√£o de PDF em desenvolvimento...")


# ============================================================================
# P√ÅGINA DE ESTAT√çSTICAS
# ============================================================================

def render_stats_page(model, class_names):
    """Renderiza p√°gina de estat√≠sticas do modelo"""
    st.markdown("## üìà Estat√≠sticas do Modelo")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### üèóÔ∏è Arquitetura")
        st.write(f"**Nome:** {model.name}")
        st.write(f"**Total de par√¢metros:** {model.count_params():,}")
        st.write(f"**Par√¢metros trein√°veis:** {sum([tf.size(w).numpy() for w in model.trainable_weights]):,}")
        st.write(f"**N√∫mero de camadas:** {len(model.layers)}")
    
    with col2:
        st.markdown("### üìä Dataset")
        st.write(f"**N√∫mero de classes:** {len(class_names)}")
        st.write(f"**Backbone:** EfficientNetB4")
        st.write(f"**Input size:** 224x224x3")
        st.write(f"**Acur√°cia:** 96%+")
    
    # Classes
    st.markdown("### üåø Classes Dispon√≠veis")
    
    # Organizar em colunas
    num_cols = 3
    classes_per_col = len(class_names) // num_cols + 1
    
    cols = st.columns(num_cols)
    
    for i, (idx, class_name) in enumerate(sorted(class_names.items())):
        col_idx = i // classes_per_col
        with cols[col_idx]:
            st.write(f"{idx}. {class_name}")


# ============================================================================
# MAIN APP
# ============================================================================

def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    
    # Sidebar
    model_path, mapping_path, confidence_threshold, show_gradcam, show_top_k = render_sidebar()
    
    # Header
    render_header()
    
    # Verificar se os arquivos existem
    if not Path(model_path).exists():
        st.error(f"‚ùå Modelo n√£o encontrado: {model_path}")
        st.info("üí° Certifique-se de treinar o modelo primeiro executando os notebooks de treinamento.")
        return
    
    if not Path(mapping_path).exists():
        st.error(f"‚ùå Mapeamento de classes n√£o encontrado: {mapping_path}")
        return
    
    # Carregar modelo e classes
    with st.spinner("‚è≥ Carregando modelo..."):
        model = load_model_cached(model_path)
        class_names = load_class_mapping_cached(mapping_path)
    
    if model is None or class_names is None:
        st.error("‚ùå Erro ao carregar modelo ou mapeamento de classes.")
        return
    
    st.success(f"‚úÖ Modelo carregado com sucesso! ({model.name})")
    
    # Tabs
    tab1, tab2, tab3 = st.tabs(["üè† Diagn√≥stico", "üìà Estat√≠sticas", "‚ùì Ajuda"])
    
    with tab1:
        # Upload
        image = render_upload_section()
        
        if image:
            # Predi√ß√£o
            render_prediction_results(
                image, model, class_names,
                confidence_threshold, show_gradcam, show_top_k
            )
        else:
            st.info("üëÜ Fa√ßa upload de uma imagem para come√ßar o diagn√≥stico")
            
            # Mostrar imagens de exemplo
            st.markdown("### üì∏ Exemplos de Imagens V√°lidas")
            st.markdown("""
            - Foto clara da folha
            - Boa ilumina√ß√£o
            - Folha ocupando a maior parte da imagem
            - Foco n√≠tido
            - Fundo simples (preferencialmente)
            """)
    
    with tab2:
        render_stats_page(model, class_names)
    
    with tab3:
        st.markdown("## ‚ùì Ajuda e Documenta√ß√£o")
        
        st.markdown("""
        ### üéØ Como Usar
        
        1. **Upload da Imagem**
           - Escolha uma foto clara de uma folha
           - Formatos aceitos: JPG, JPEG, PNG
           - Tamanho recomendado: m√≠nimo 224x224 pixels
        
        2. **An√°lise**
           - O sistema automaticamente analisa a imagem
           - Resultado em segundos
           - Confian√ßa da predi√ß√£o √© mostrada
        
        3. **Grad-CAM**
           - Visualiza√ß√£o de onde o modelo est√° "olhando"
           - √Åreas vermelhas = maior aten√ß√£o
           - Ajuda a validar o diagn√≥stico
        
        4. **Recomenda√ß√µes**
           - Sugest√µes de tratamento
           - Pr√°ticas culturais
           - M√©todos de preven√ß√£o
        
        ### üî¨ Tecnologias
        
        - **Framework:** TensorFlow + Keras
        - **Arquitetura:** EfficientNetB4
        - **T√©cnica:** Transfer Learning
        - **Explicabilidade:** Grad-CAM
        - **Interface:** Streamlit
        
        ### üìö Documenta√ß√£o Completa
        
        Visite o [GitHub do projeto](https://github.com/ricardofrugoni/planthealth-ai) 
        para documenta√ß√£o completa, notebooks de treinamento e mais informa√ß√µes.
        
        ### üêõ Problemas ou Sugest√µes?
        
        Abra uma issue no GitHub ou entre em contato pelo email.
        """)
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #7f8c8d;">
        <p>Desenvolvido com ‚ù§Ô∏è e üå± | PlantHealth AI v1.0</p>
        <p>¬© 2025 - Todos os direitos reservados</p>
    </div>
    """, unsafe_allow_html=True)


if __name__ == "__main__":
    main()

